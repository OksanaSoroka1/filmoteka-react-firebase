{"version":3,"file":"static/js/66.405a7255.chunk.js","mappings":"kOAOMA,EAAc,CAAC,CAAEC,KAAK,GAAD,OAAKC,EAAAA,EAAL,YAAwBC,MAAO,mBACxD,CAAEF,KAAK,GAAD,OAAKC,EAAAA,EAAL,aAAyBC,MAAO,oBACpC,CAAEF,KAAK,GAAD,OAAKC,EAAAA,EAAL,YAAwBC,MAAO,oBAiDzC,UA/CiB,SAAC,GAAe,IAAbA,EAAY,EAAZA,MAChB,GAAuDC,EAAAA,EAAAA,KAAhDC,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,WAAYC,EAA9B,EAA8BA,cAAeC,EAA7C,EAA6CA,QAEnCC,GAAWC,EAAAA,EAAAA,MACrB,GAA+BC,EAAAA,EAAAA,KAAvBC,EAAR,EAAQA,UAAYC,EAApB,EAAoBA,QAgCpB,OA/BAC,EAAAA,EAAAA,YAAU,YACgB,WAAO,IAAD,IACpB,UAAAL,EAASM,aAAT,SAAgBC,WAAhB,UAA8BP,EAASM,aAAvC,OAA8B,EAAgBE,YAA0B,MAAZL,EAC5DM,QAAQC,IAAI,qBAGhBD,QAAQC,IAAI,cACfN,EAAQ,MAETO,KAEF,CAACX,KACHK,EAAAA,EAAAA,YAAU,WAEN,OAAQL,EAASY,UAEb,IAAI,GAAJ,OAAQnB,EAAAA,EAAR,YACIM,EAAQc,EAAAA,GAAmBV,GAC3B,MACH,IAAI,GAAJ,OAAQV,EAAAA,EAAR,aACGM,EAAQe,EAAAA,GAAmBX,GAC3B,MACH,IAAI,GAAJ,OAAQV,EAAAA,EAAR,YACGM,EAAQgB,EAAAA,GAAmBZ,MAMpC,CAACH,EAAUG,KAIV,SAAC,IAAD,CAAkBL,cAAeA,EAC7BJ,MAAOA,EACPE,UAAWA,EACXoB,QAASzB,EACTM,WAAYA,M,oHClDXF,EAAe,WACvB,OAAkCsB,EAAAA,EAAAA,UAAS,IAA3C,eAAOrB,EAAP,KAAkBsB,EAAlB,KAED,GAAoCD,EAAAA,EAAAA,UAAS,GAA7C,eAAOpB,EAAP,KAAmBsB,EAAnB,KACA,GAA4CC,EAAAA,EAAAA,KAApCtB,EAAR,EAAQA,cAAeuB,EAAvB,EAAuBA,iBACvB,GAAwCJ,EAAAA,EAAAA,UAAS,IAAjD,eAAOK,EAAP,KAAqBC,EAArB,KACMvB,GAAWC,EAAAA,EAAAA,OAChBI,EAAAA,EAAAA,YAAU,WACLkB,EAAgB3B,KAUlB,CAA2BA,IAE/B,IAAMG,EAAO,yCAAG,WAAOyB,EAAUrB,EAAWsB,EAAQC,GAApC,2FACR1B,EAASM,aADD,QACR,EAAgBC,UADR,iEAIPc,EAAiB,WAJV,SAKYG,EAASrB,EAAWsB,EAAQC,GALxC,OAKDC,EALC,OAOPN,EAAiB,UACjBH,EAAaS,EAAKC,SAClBD,EAAKE,MAAOV,EAAcQ,EAAKE,OAASV,EAAcQ,EAAKG,aATpD,kDAYPT,EAAiB,SACdZ,QAAQC,IAAR,MAbI,0DAAH,4DAkBb,MAAO,CACHd,UAAAA,EACA0B,aAAAA,EACAzB,WAAAA,EACAC,cAAAA,EAEAC,QAAAA,EACAwB,gBAAAA","sources":["features/pages/Home/Home.js","hooks/useFilmsList.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { getTrendMovieList, getTopRatedMovies, getUpcomingMovies } from '../../../API/films';\r\nimport { FilmsListSection } from '../../sections/FilmsListSection';\r\nimport { useFilmsList } from '../../../hooks/useFilmsList';\r\nimport { useFetchPage } from '../../../hooks/useFetchPage';\r\nimport { baseURL } from '../../components/Routes'; \r\nconst homePathArr = [{ path: `${baseURL}trending`, title: 'Trending movies' },\r\n  { path: `${baseURL}top-rated`, title: 'Top-rated movies' },\r\n    { path: `${baseURL}upcoming`, title: 'Upcoming movies' }]\r\n  \r\nconst HomePage = ({ title }) => { \r\n    const {filmsList, totalPages, loadingStatus, setList }=useFilmsList()\r\n/*     const [fetchPage, setFetchPage] = useState('1');\r\n */     const location = useLocation();\r\n    const { fetchPage , setPage} = useFetchPage()\r\n    useEffect(() => { \r\n        const onNewLocation = () => {\r\n            if (location.state?.fromModal  || location.state?.background || fetchPage==='1') {\r\n                console.log('state from modal')\r\n                 return\r\n            }\r\n            console.log('set 1 page')\r\n         setPage('1') \r\n        }\r\n        onNewLocation()\r\n       \r\n    },[location])\r\n    useEffect(() => {\r\n       /*  console.log(`fetch page became ${fetchPage} in home`) */\r\n        switch (location.pathname) {\r\n            \r\n            case `${baseURL}trending`:\r\n                setList(getTrendMovieList, fetchPage)\r\n                break;\r\n             case `${baseURL}top-rated`:\r\n                setList(getTopRatedMovies, fetchPage)\r\n                break;\r\n             case `${baseURL}upcoming`:\r\n                setList(getUpcomingMovies, fetchPage)\r\n                break;\r\n        \r\n            default:\r\n                break;\r\n        }     \r\n    }, [location, fetchPage])\r\n    \r\n    return (\r\n        \r\n        <FilmsListSection loadingStatus={loadingStatus}\r\n            title={title}\r\n            filmsList={filmsList}\r\n            pathArr={homePathArr}\r\n            totalPages={totalPages}\r\n            /* setFetchPage={setFetchPage} */></FilmsListSection>\r\n        \r\n    )\r\n}\r\nexport default HomePage","import { useState, useEffect } from \"react\";\r\nimport { useLoadingStatus } from \"./useLoadingstatus\";\r\nimport { useLocation } from \"react-router-dom\";\r\nexport const useFilmsList = () => { \r\n     const [filmsList, setFilmsList] = useState([]);\r\n   \r\n    const [totalPages, setTotalPages] = useState(0);\r\n    const { loadingStatus, setLoadingStatus } = useLoadingStatus();\r\n    const [filteredList, setFilteredList] = useState([]);\r\n    const location = useLocation();\r\n     useEffect(() => {\r\n          setFilteredList(filmsList)\r\n        /* if (!movieFilters.genre) {\r\n\r\n            setFilteredList(filmsList)\r\n            return\r\n         }\r\n        const filteredFilms = filmsList.filter(film => {\r\n            return film.genre_ids.includes(Number(movieFilters.genre))\r\n        });\r\n        setFilteredList(filteredFilms) */\r\n     }, [/* movieFilters.genre, */ filmsList])\r\n    \r\n    const setList = async (apiFilms, fetchPage, search, year) => { \r\n        if (location.state?.fromModal) {return }\r\n         try {\r\n             \r\n             setLoadingStatus('pending')\r\n             const data = await apiFilms(fetchPage, search, year);  \r\n             /*  console.log(data) */\r\n             setLoadingStatus('loaded')\r\n             setFilmsList(data.results)\r\n             data.pages? setTotalPages(data.pages) : setTotalPages(data.total_pages)\r\n             \r\n         } catch (error) {\r\n             setLoadingStatus('error')\r\n                console.log(error)\r\n            }\r\n    }\r\n     \r\n    \r\n    return {\r\n        filmsList,\r\n        filteredList,\r\n        totalPages,\r\n        loadingStatus,\r\n       \r\n        setList,\r\n        setFilteredList\r\n    }\r\n}"],"names":["homePathArr","path","baseURL","title","useFilmsList","filmsList","totalPages","loadingStatus","setList","location","useLocation","useFetchPage","fetchPage","setPage","useEffect","state","fromModal","background","console","log","onNewLocation","pathname","getTrendMovieList","getTopRatedMovies","getUpcomingMovies","pathArr","useState","setFilmsList","setTotalPages","useLoadingStatus","setLoadingStatus","filteredList","setFilteredList","apiFilms","search","year","data","results","pages","total_pages"],"sourceRoot":""}