{"version":3,"file":"static/js/95.95ba7551.chunk.js","mappings":"2RAiEA,EAvDmB,WACf,OAA4BA,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA+BC,EAAAA,EAAAA,KAAvBC,EAAR,EAAQA,UAAYC,EAApB,EAAoBA,QACtB,GAAsEC,EAAAA,EAAAA,KAArDC,GAAjB,EAAOC,UAAP,EAAiBD,cAAcE,EAA/B,EAA+BA,WAAYC,EAA3C,EAA2CA,cAAeC,EAA1D,EAA0DA,QACxD,ECZ2B,WACvB,OAAwCX,EAAAA,EAAAA,UAAS,CAACY,KAAK,GAAIC,MAAO,KAAlE,eAAOC,EAAP,KAAqBC,EAArB,KACJ,GAAoCf,EAAAA,EAAAA,UAAS,IAA7C,eAAOgB,EAAP,KAAmBC,EAAnB,KA0BA,OAzBAC,EAAAA,EAAAA,YAAU,WACL,IAAMC,EAAS,yCAAG,mHAEMC,EAAAA,EAAAA,MAFN,OAETC,EAFS,OAGnBJ,EAAcI,GAHK,gDAKfC,QAAQC,IAAR,MALe,yDAAH,qDAQhBJ,MACD,IAeI,CACHL,aAAAA,EACAE,WAAAA,EACAD,gBAAAA,EACAS,YAjBP,SAAqBC,GACd,OAAQA,EAAEC,OAAOC,IACb,IAAK,YACDZ,EAAgB,CAAEF,MAAOC,EAAaD,MAAOD,KAAM,KACnD,MACH,IAAK,aACFG,EAAgB,CAAEF,MAAO,GAAID,KAAOE,EAAaF,UDTRgB,GAA7Cd,EAAR,EAAQA,aAAR,EAAuBC,gBAAvB,EAAwCS,aAIxCN,EAAAA,EAAAA,YAAU,WACDjB,GACLU,EAAQkB,EAAAA,GAAezB,EAAWH,EAAQa,EAAaF,QACxD,CAACX,EAAQa,EAAaF,KAAMR,IAkB/B,OACI,SAAC0B,EAAA,EAAD,CAAkBtB,UAAWD,EACzBE,WAAYA,EAEZR,QAAQ,EACR8B,SAAU,SAACC,GAAD,OATlB,SAAqBA,GACjB3B,EAAQ,KACRH,EAAU8B,GAOeC,CAAYD,IACjCtB,cAAgBA,M,oHE1CfJ,EAAe,WACvB,OAAkCN,EAAAA,EAAAA,UAAS,IAA3C,eAAOQ,EAAP,KAAkB0B,EAAlB,KAED,GAAoClC,EAAAA,EAAAA,UAAS,GAA7C,eAAOS,EAAP,KAAmB0B,EAAnB,KACA,GAA4CC,EAAAA,EAAAA,KAApC1B,EAAR,EAAQA,cAAe2B,EAAvB,EAAuBA,iBACvB,GAAwCrC,EAAAA,EAAAA,UAAS,IAAjD,eAAOO,EAAP,KAAqB+B,EAArB,KACMC,GAAWC,EAAAA,EAAAA,OAChBtB,EAAAA,EAAAA,YAAU,WACLoB,EAAgB9B,KAUlB,CAA2BA,IAE/B,IAAMG,EAAO,yCAAG,WAAO8B,EAAUrC,EAAWH,EAAQW,GAApC,2FACR2B,EAASG,aADD,QACR,EAAgBC,UADR,iEAIPN,EAAiB,WAJV,SAKYI,EAASrC,EAAWH,EAAQW,GALxC,OAKDgC,EALC,OAOPP,EAAiB,UACjBH,EAAaU,EAAKC,SAClBD,EAAKE,MAAOX,EAAcS,EAAKE,OAASX,EAAcS,EAAKG,aATpD,kDAYPV,EAAiB,SACdf,QAAQC,IAAR,MAbI,0DAAH,4DAkBb,MAAO,CACHf,UAAAA,EACAD,aAAAA,EACAE,WAAAA,EACAC,cAAAA,EAEAC,QAAAA,EACA2B,gBAAAA","sources":["features/pages/Movies/Movies.js","hooks/useFilmsFilters.js","hooks/useFilmsList.js"],"sourcesContent":["import { SearchForm } from \"../../components\";\r\nimport { useState, useEffect} from 'react'\r\nimport { MoviesFilter } from \"../../components\";\r\nimport { getMovieByName } from \"../../../API/films\";\r\nimport { useMemo } from \"react\";\r\nimport { usePageSettings } from \"../../../hooks/usePageSettings\";\r\nimport { FilmsListSection } from \"../../sections/FilmsListSection\";\r\nimport { useFilmsList } from \"../../../hooks/useFilmsList\";\r\nimport { useFilmsFilters } from \"../../../hooks/useFilmsFilters\";\r\nimport { useFetchPage } from \"../../../hooks/useFetchPage\";\r\nconst MoviesPage = () => { \r\n    const [search, setSearch] = useState('');\r\n    const { fetchPage , setPage} = useFetchPage();\r\n  const {filmsList,filteredList, totalPages, loadingStatus, setList } = useFilmsList()\r\n    const { movieFilters,  setMovieFilters, clearFilter}=useFilmsFilters()\r\n   \r\n   \r\n    \r\n    useEffect(() => {\r\n        if (!search  ) { return}     \r\n        setList(getMovieByName,fetchPage, search, movieFilters.year )\r\n    }, [search, movieFilters.year, fetchPage])\r\n\r\n   \r\n    \r\n    const setFilters = (data) => { \r\n        const { year, genre } = data;\r\n        console.log(data)\r\n        setMovieFilters(data)\r\n    }\r\n\r\n   \r\n    \r\n    \r\n    \r\n    function onNewSearch(value) {\r\n        setPage('1');\r\n        setSearch(value);\r\n     }\r\n    return (\r\n        <FilmsListSection filmsList={filteredList}\r\n            totalPages={totalPages}\r\n            \r\n            search={true}\r\n            onSearch={(value) => onNewSearch(value)}\r\n            loadingStatus={ loadingStatus}></FilmsListSection>\r\n        \r\n        /* <StyledSection>\r\n        <SearchForm onHandleSubmit={( value) =>   onNewSearch(value) }></SearchForm>\r\n        <MoviesFilter  genresList={genresList} onFiltersChange={(data) => setFilters(data)}></MoviesFilter>\r\n        {search && (<p>Results on `{search}`</p>) }\r\n        {movieFilters.year && (<div>\r\n            <span>Year: {movieFilters.year}</span>\r\n            <button id='clearYear' type='button' onClick={(e)=>clearFilter(e) }>Clear</button>\r\n        </div>)}\r\n        {movieFilters.genre && (<div>\r\n            <span>Genre: {movieFilters.genre}</span>\r\n            <button id='clearGenre' type='button' onClick={(e)=>clearFilter(e) }>Clear</button>\r\n        </div>)}\r\n        {filteredList.length > 0 && (<ListViewFilters colorTheme={ colorTheme} ></ListViewFilters>)}\r\n        {filteredList.length > 0 && (<FilmList filmsArr={filteredList} colorTheme={ colorTheme} ></FilmList>)}\r\n        {totalPages !== 0 && (<PagesNav totalPages={totalPages} onPageClick={(page) => setFetchPage(page)} search={search}></PagesNav>)\r\n        }\r\n    </StyledSection> */)\r\n}\r\nexport default MoviesPage","import { useState, useEffect } from 'react'\r\nimport { getGenres } from '../API/films'\r\nexport const useFilmsFilters = () => { \r\n        const [movieFilters, setMovieFilters] = useState({year:'', genre: ''})\r\n    const [genresList, setGenresList] = useState([])\r\n    useEffect(() => { \r\n         const setGenres = async () => {\r\n        try {\r\n            const genres = await getGenres();\r\n        setGenresList(genres)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }   \r\n    }\r\n        setGenres();\r\n    }, []) \r\n\r\n function clearFilter(e) { \r\n        switch (e.target.id) {\r\n            case 'clearYear':\r\n                setMovieFilters({ genre: movieFilters.genre, year: '' });\r\n                break;\r\n             case 'clearGenre':\r\n                setMovieFilters({ genre: '', year:  movieFilters.year });\r\n                break;\r\n        \r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    return {\r\n        movieFilters,\r\n        genresList,\r\n        setMovieFilters,\r\n        clearFilter\r\n    }\r\n}","import { useState, useEffect } from \"react\";\r\nimport { useLoadingStatus } from \"./useLoadingstatus\";\r\nimport { useLocation } from \"react-router-dom\";\r\nexport const useFilmsList = () => { \r\n     const [filmsList, setFilmsList] = useState([]);\r\n   \r\n    const [totalPages, setTotalPages] = useState(0);\r\n    const { loadingStatus, setLoadingStatus } = useLoadingStatus();\r\n    const [filteredList, setFilteredList] = useState([]);\r\n    const location = useLocation();\r\n     useEffect(() => {\r\n          setFilteredList(filmsList)\r\n        /* if (!movieFilters.genre) {\r\n\r\n            setFilteredList(filmsList)\r\n            return\r\n         }\r\n        const filteredFilms = filmsList.filter(film => {\r\n            return film.genre_ids.includes(Number(movieFilters.genre))\r\n        });\r\n        setFilteredList(filteredFilms) */\r\n     }, [/* movieFilters.genre, */ filmsList])\r\n    \r\n    const setList = async (apiFilms, fetchPage, search, year) => { \r\n        if (location.state?.fromModal) {return }\r\n         try {\r\n             \r\n             setLoadingStatus('pending')\r\n             const data = await apiFilms(fetchPage, search, year);  \r\n             /*  console.log(data) */\r\n             setLoadingStatus('loaded')\r\n             setFilmsList(data.results)\r\n             data.pages? setTotalPages(data.pages) : setTotalPages(data.total_pages)\r\n             \r\n         } catch (error) {\r\n             setLoadingStatus('error')\r\n                console.log(error)\r\n            }\r\n    }\r\n     \r\n    \r\n    return {\r\n        filmsList,\r\n        filteredList,\r\n        totalPages,\r\n        loadingStatus,\r\n       \r\n        setList,\r\n        setFilteredList\r\n    }\r\n}"],"names":["useState","search","setSearch","useFetchPage","fetchPage","setPage","useFilmsList","filteredList","filmsList","totalPages","loadingStatus","setList","year","genre","movieFilters","setMovieFilters","genresList","setGenresList","useEffect","setGenres","getGenres","genres","console","log","clearFilter","e","target","id","useFilmsFilters","getMovieByName","FilmsListSection","onSearch","value","onNewSearch","setFilmsList","setTotalPages","useLoadingStatus","setLoadingStatus","setFilteredList","location","useLocation","apiFilms","state","fromModal","data","results","pages","total_pages"],"sourceRoot":""}